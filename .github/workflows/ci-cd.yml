name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    services:
      mariadb:
        image: mariadb:11.4
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: mvidarr_test
          MYSQL_USER: mvidarr
          MYSQL_PASSWORD: test_password
          MYSQL_CHARSET: utf8mb4
          MYSQL_COLLATION: utf8mb4_unicode_ci
          MARIADB_AUTO_UPGRADE: 1
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root --password=test_password --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=15
          --health-start-period=90s
          --tmpfs /tmp:rw,noexec,nosuid,size=512m
          --tmpfs /var/lib/mysql-logs:rw,noexec,nosuid,size=128m
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmariadb-dev pkg-config ffmpeg
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort
    
    - name: Create test environment file
      run: |
        cat > .env << EOF
        DB_HOST=localhost
        DB_PORT=3306
        DB_USER=mvidarr
        DB_PASSWORD=test_password
        DB_NAME=mvidarr_test
        SECRET_KEY=test_secret_key_for_ci
        DEBUG=true
        IMVDB_API_KEY=test_key
        YOUTUBE_API_KEY=test_key
        EOF
    
    - name: Create data directories
      run: |
        mkdir -p data/downloads data/thumbnails data/logs data/cache data/backups
    
    - name: Wait for MariaDB
      run: |
        timeout=240
        count=0
        echo "Waiting for MariaDB service to be ready..."
        echo "Checking initial container status:"
        docker ps -a | grep mariadb || true
        
        while [ $count -lt $timeout ]; do
          if mysqladmin ping -h localhost -P 3306 -u root --password=test_password --silent 2>/dev/null; then
            echo "MariaDB ping successful! Testing full connection..."
            if mysql -h localhost -P 3306 -u root --password=test_password -e "SELECT 1" >/dev/null 2>&1; then
              echo "MariaDB connection verified successfully!"
              echo "Testing database access:"
              mysql -h localhost -P 3306 -u mvidarr --password=test_password -e "SELECT 1" mvidarr_test >/dev/null 2>&1 && echo "Database mvidarr_test accessible!"
              break
            else
              echo "Ping successful but connection test failed, retrying..."
            fi
          else
            echo "MariaDB ping failed, checking container status:"
            docker ps -a | grep mariadb || true
          fi
          echo "Waiting for MariaDB to be ready... ($count/$timeout seconds)"
          sleep 5
          count=$((count + 5))
        done
        if [ $count -ge $timeout ]; then
          echo "MariaDB failed to start within $timeout seconds"
          echo "Final container status:"
          docker ps -a | grep mariadb || true
          echo "Container logs:"
          docker logs $(docker ps -a --filter ancestor=mariadb:11.4 --format "{{.ID}}" | head -1) || true
          exit 1
        fi
    
    - name: Initialize database
      run: |
        python -c "
        from src.database.init_db import initialize_database
        initialize_database()
        "
    
    - name: Run linting
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting
      run: |
        black --check src/
        isort --check-only src/
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v4
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64

  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deployment step would go here"
        echo "This could involve:"
        echo "- Updating Docker Compose on production server"
        echo "- Running database migrations"
        echo "- Health checks"
        echo "- Rollback on failure"

  release:
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create release assets
      run: |
        # Create source code archive
        tar -czf mvidarr-enhanced-${{ github.event.release.tag_name }}.tar.gz \
          --exclude='.git' \
          --exclude='data' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.env' \
          .
        
        # Create installation package
        mkdir -p release-package
        cp -r src/ frontend/ scripts/ docker/ release-package/
        cp app.py requirements.txt docker-compose.production.yml Dockerfile.production release-package/
        cp .env.template release-package/.env.example
        cp SETUP.md README.md release-package/
        
        tar -czf mvidarr-enhanced-install-${{ github.event.release.tag_name }}.tar.gz -C release-package .
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: mvidarr-enhanced-${{ github.event.release.tag_name }}.tar.gz
        asset_name: mvidarr-enhanced-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload installation package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: mvidarr-enhanced-install-${{ github.event.release.tag_name }}.tar.gz
        asset_name: mvidarr-enhanced-install-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip