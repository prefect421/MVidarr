name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate release notes
      id: release_notes
      run: |
        # Get the tag name
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "Tag: $TAG_NAME"
        
        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 $TAG_NAME^ 2>/dev/null || echo "")
        
        echo "## 🚀 MVidarr Release $TAG_NAME" > release_notes.md
        echo "" >> release_notes.md
        
        if [ -n "$PREV_TAG" ]; then
          echo "### 📋 Changes since $PREV_TAG:" >> release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..$TAG_NAME >> release_notes.md
        else
          echo "### 📋 Initial Release Features:" >> release_notes.md
          echo "" >> release_notes.md
          echo "- 🎯 Advanced Artist Management with multi-criteria search and bulk operations" >> release_notes.md
          echo "- 📺 Comprehensive Video Discovery with dual-source integration (IMVDb + YouTube)" >> release_notes.md
          echo "- 🖼️ Professional Thumbnail Management with multi-source search and cropping" >> release_notes.md
          echo "- 📁 Intelligent Organization with automatic folder creation and cleanup" >> release_notes.md
          echo "- 🔍 Advanced Search System with real-time suggestions and filtering" >> release_notes.md
          echo "- ⚡ Bulk Operations with multi-select editing and batch processing" >> release_notes.md
          echo "- 🎥 Video Streaming with built-in player and transcoding" >> release_notes.md
          echo "- 🔧 System Health monitoring with comprehensive diagnostics" >> release_notes.md
          echo "- 💾 Database-Driven Settings with complete configuration management" >> release_notes.md
          echo "- 📊 Download Management with queue visualization and progress tracking" >> release_notes.md
          echo "- 🔐 Multi-User Authentication with role-based access control" >> release_notes.md
          echo "- 🛡️ Advanced Security with password policies and audit logging" >> release_notes.md
          echo "- 🎨 Modern UI with left sidebar navigation and theme system" >> release_notes.md
          echo "- 📺 MvTV Continuous Player with cinematic mode" >> release_notes.md
          echo "- 🔒 Two-Factor Authentication with TOTP support" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "### 📦 Installation:" >> release_notes.md
        echo "" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "# Docker (Recommended)" >> release_notes.md
        echo "docker run -d \\" >> release_notes.md
        echo "  --name mvidarr \\" >> release_notes.md
        echo "  -p 5000:5000 \\" >> release_notes.md
        echo "  -v mvidarr_data:/app/data \\" >> release_notes.md
        echo "  -v \$(pwd)/musicvideos:/app/downloads \\" >> release_notes.md
        echo "  ghcr.io/${{ github.repository }}:$TAG_NAME" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 🔧 System Requirements:" >> release_notes.md
        echo "- Python 3.12+" >> release_notes.md
        echo "- MariaDB 10.6+" >> release_notes.md
        echo "- FFmpeg (for video processing)" >> release_notes.md
        echo "- 2GB+ RAM recommended" >> release_notes.md
        echo "- 10GB+ storage for downloads" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 📖 Documentation:" >> release_notes.md
        echo "- [Installation Guide](https://github.com/${{ github.repository }}/blob/main/docs/INSTALLATION.md)" >> release_notes.md
        echo "- [User Guide](https://github.com/${{ github.repository }}/blob/main/docs/USER_GUIDE.md)" >> release_notes.md
        echo "- [API Documentation](https://github.com/${{ github.repository }}/blob/main/docs/API.md)" >> release_notes.md
        echo "" >> release_notes.md
        echo "🎉 **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...$TAG_NAME" >> release_notes.md
        
        # Set output for GitHub Actions
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: MVidarr ${{ github.ref_name }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  build-release-assets:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        platform: [linux-amd64, linux-arm64]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract platform info
      id: platform
      run: |
        PLATFORM_PAIR=${{ matrix.platform }}
        echo "platform-pair=${PLATFORM_PAIR}" >> $GITHUB_OUTPUT
        echo "platform=${PLATFORM_PAIR//-/\/}" >> $GITHUB_OUTPUT

    - name: Build and push by digest
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        platforms: ${{ steps.platform.outputs.platform }}
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ matrix.platform }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-manifest:
    name: Create Multi-Platform Manifest
    runs-on: ubuntu-latest
    needs: [create-release, build-release-assets]
    
    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create and push manifest
      run: |
        TAG_NAME=${{ github.ref_name }}
        
        # Create manifest list
        docker manifest create \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG_NAME} \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG_NAME}-linux-amd64 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG_NAME}-linux-arm64
        
        # Push manifest
        docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG_NAME}
        
        # Also tag as latest if this is not a pre-release
        if [[ ! "${TAG_NAME}" =~ (alpha|beta|rc) ]]; then
          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG_NAME}-linux-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG_NAME}-linux-arm64
          
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        fi

  create-source-archive:
    name: Create Source Archive
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create source archive
      run: |
        TAG_NAME=${{ github.ref_name }}
        
        # Create clean source archive excluding development files
        tar --exclude='.git' \
            --exclude='.github' \
            --exclude='data' \
            --exclude='*.pyc' \
            --exclude='__pycache__' \
            --exclude='.pytest_cache' \
            --exclude='node_modules' \
            --exclude='.env' \
            --exclude='.env.local' \
            -czf mvidarr-enhanced-${TAG_NAME}-source.tar.gz .
        
        # Create installation package with scripts
        mkdir -p install-package
        cp -r scripts install-package/
        cp requirements.txt install-package/
        cp docker-compose.production.yml install-package/docker-compose.yml
        cp docs/INSTALLATION.md install-package/README.md
        
        tar -czf mvidarr-enhanced-${TAG_NAME}-install.tar.gz -C install-package .

    - name: Upload source archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./mvidarr-enhanced-${{ github.ref_name }}-source.tar.gz
        asset_name: mvidarr-enhanced-${{ github.ref_name }}-source.tar.gz
        asset_content_type: application/gzip

    - name: Upload installation package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./mvidarr-enhanced-${{ github.ref_name }}-install.tar.gz
        asset_name: mvidarr-enhanced-${{ github.ref_name }}-install.tar.gz
        asset_content_type: application/gzip

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version in documentation
      run: |
        TAG_NAME=${{ github.ref_name }}
        VERSION=${TAG_NAME#v}
        
        # Update version in README if it exists
        if [ -f README.md ]; then
          sed -i "s/version-[0-9.]*/version-${VERSION}/g" README.md
          sed -i "s/v[0-9.]*/${TAG_NAME}/g" README.md
        fi
        
        # Update CHANGELOG
        if [ ! -f CHANGELOG.md ]; then
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi
        
        # Prepend new version to changelog
        {
          echo "## [${TAG_NAME}] - $(date +%Y-%m-%d)"
          echo ""
          echo "### Added"
          echo "- Release ${TAG_NAME}"
          echo ""
          cat CHANGELOG.md
        } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md

    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md CHANGELOG.md || true
        git diff --staged --quiet || git commit -m "Update documentation for release ${{ github.ref_name }}"
        git push || true