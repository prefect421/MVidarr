name: Secret Detection and Management

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  schedule:
    # Run secret scan daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  secret-detection:
    name: Advanced Secret Detection
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      issues: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for comprehensive secret detection

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install secret detection tools
      run: |
        python -m pip install --upgrade pip
        pip install detect-secrets truffleHog3 gitpython
        
        # Install gitleaks
        wget -O gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/download/v8.18.4/gitleaks_8.18.4_linux_x64.tar.gz
        tar -xzf gitleaks.tar.gz
        sudo mv gitleaks /usr/local/bin/
        
    - name: Run GitLeaks secret detection
      run: |
        echo "🔍 Running GitLeaks secret detection..."
        gitleaks detect --source . --report-format json --report-path gitleaks-report.json --verbose || true
        
        # Generate summary
        echo "## 🔐 GitLeaks Secret Detection Results" > secret-detection-summary.md
        echo "Scan completed on: $(date -u)" >> secret-detection-summary.md
        echo "" >> secret-detection-summary.md
        
        if [ -f "gitleaks-report.json" ] && [ -s "gitleaks-report.json" ]; then
          SECRET_COUNT=$(jq length gitleaks-report.json 2>/dev/null || echo "0")
          echo "**Potential secrets found**: $SECRET_COUNT" >> secret-detection-summary.md
          
          if [ "$SECRET_COUNT" -gt 0 ]; then
            echo "⚠️ **WARNING**: Potential secrets detected in repository!" >> secret-detection-summary.md
            echo "" >> secret-detection-summary.md
            echo "### Secret Types Detected:" >> secret-detection-summary.md
            jq -r '.[].RuleID' gitleaks-report.json 2>/dev/null | sort | uniq -c | sed 's/^/- /' >> secret-detection-summary.md || true
          else
            echo "✅ No secrets detected" >> secret-detection-summary.md
          fi
        else
          echo "✅ No secrets detected" >> secret-detection-summary.md
        fi

    - name: Run detect-secrets baseline
      run: |
        echo "🔍 Running detect-secrets analysis..."
        
        # Create or update secrets baseline
        detect-secrets scan --all-files --disable-plugin AbsolutePathDetectorPlugin > .secrets.baseline || true
        
        # Audit against baseline  
        detect-secrets audit .secrets.baseline --statistics > detect-secrets-stats.txt || true
        
        # Generate report
        echo "" >> secret-detection-summary.md
        echo "### detect-secrets Analysis:" >> secret-detection-summary.md
        if [ -f "detect-secrets-stats.txt" ]; then
          cat detect-secrets-stats.txt >> secret-detection-summary.md
        fi

    - name: Run TruffleHog historical scan
      run: |
        echo "🔍 Running TruffleHog historical analysis..."
        
        # Scan git history for secrets
        python -m truffleHog3 --format json --output truffleHog-results.json . || true
        
        echo "" >> secret-detection-summary.md
        echo "### TruffleHog Historical Scan:" >> secret-detection-summary.md
        
        if [ -f "truffleHog-results.json" ] && [ -s "truffleHog-results.json" ]; then
          TRUFFLE_COUNT=$(jq length truffleHog-results.json 2>/dev/null || echo "0")
          echo "**Historical secrets found**: $TRUFFLE_COUNT" >> secret-detection-summary.md
        else
          echo "✅ No historical secrets detected" >> secret-detection-summary.md
        fi

    - name: Environment variable security check
      run: |
        echo "🔍 Checking environment variable security patterns..."
        
        echo "" >> secret-detection-summary.md
        echo "### Environment Security Analysis:" >> secret-detection-summary.md
        
        # Check for insecure environment variable patterns
        INSECURE_PATTERNS=0
        
        # Check for hardcoded secrets in environment files
        if find . -name "*.env*" -type f -exec grep -l "password\|secret\|key\|token" {} \; 2>/dev/null | grep -v ".env.example" > env-files-with-secrets.txt; then
          if [ -s env-files-with-secrets.txt ]; then
            INSECURE_PATTERNS=$((INSECURE_PATTERNS + 1))
            echo "⚠️ **WARNING**: Environment files contain potential secrets" >> secret-detection-summary.md
            echo "Files to review:" >> secret-detection-summary.md
            cat env-files-with-secrets.txt | sed 's/^/- /' >> secret-detection-summary.md
          fi
        fi
        
        # Check for exposed .env files in git
        if git ls-files | grep -E "\.env$|\.env\..*$" | grep -v ".env.example" > tracked-env-files.txt; then
          if [ -s tracked-env-files.txt ]; then
            INSECURE_PATTERNS=$((INSECURE_PATTERNS + 1))
            echo "🚨 **CRITICAL**: .env files are tracked in git!" >> secret-detection-summary.md
            cat tracked-env-files.txt | sed 's/^/- /' >> secret-detection-summary.md
          fi
        fi
        
        if [ $INSECURE_PATTERNS -eq 0 ]; then
          echo "✅ Environment variable security: PASS" >> secret-detection-summary.md
        fi

    - name: Secret rotation recommendations
      run: |
        echo "" >> secret-detection-summary.md
        echo "### 🔄 Secret Management Recommendations:" >> secret-detection-summary.md
        echo "" >> secret-detection-summary.md
        echo "1. **Use GitHub Secrets**: Store sensitive values in repository/organization secrets" >> secret-detection-summary.md
        echo "2. **Environment Templates**: Use .env.example files instead of committing actual .env files" >> secret-detection-summary.md
        echo "3. **Secret Rotation**: Regularly rotate API keys, database passwords, and access tokens" >> secret-detection-summary.md
        echo "4. **Least Privilege**: Use service accounts with minimal required permissions" >> secret-detection-summary.md
        echo "5. **Secret Scanning**: Enable GitHub secret scanning alerts in repository settings" >> secret-detection-summary.md

    - name: Create security issue for critical findings
      if: always()
      run: |
        # Check if critical secrets were found and create issue
        CRITICAL_SECRETS=0
        
        if [ -f "gitleaks-report.json" ] && [ -s "gitleaks-report.json" ]; then
          SECRET_COUNT=$(jq length gitleaks-report.json 2>/dev/null || echo "0")
          if [ "$SECRET_COUNT" -gt 0 ]; then
            CRITICAL_SECRETS=$((CRITICAL_SECRETS + SECRET_COUNT))
          fi
        fi
        
        if [ -f "tracked-env-files.txt" ] && [ -s "tracked-env-files.txt" ]; then
          CRITICAL_SECRETS=$((CRITICAL_SECRETS + 1))
        fi
        
        if [ $CRITICAL_SECRETS -gt 0 ]; then
          echo "🚨 CRITICAL SECRET EXPOSURE DETECTED!"
          echo "Found $CRITICAL_SECRETS potential secret exposures"
          echo "This would create a GitHub issue in production setup"
          echo "Manual review required immediately"
        else
          echo "✅ No critical secret exposures detected"
        fi

    - name: Upload secret detection artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: secret-detection-scan-${{ github.sha }}
        path: |
          gitleaks-report.json
          .secrets.baseline
          detect-secrets-stats.txt
          truffleHog-results.json
          secret-detection-summary.md
          env-files-with-secrets.txt
          tracked-env-files.txt
        retention-days: 90
        if-no-files-found: warn

    - name: Update job summary
      if: always()
      run: |
        echo "## 🔐 Secret Detection Summary" >> $GITHUB_STEP_SUMMARY
        if [ -f "secret-detection-summary.md" ]; then
          cat secret-detection-summary.md >> $GITHUB_STEP_SUMMARY
        fi

    - name: Cleanup sensitive files
      if: always()
      run: |
        # Clean up any temporary files that might contain sensitive data
        rm -f gitleaks.tar.gz
        rm -f env-files-with-secrets.txt
        rm -f tracked-env-files.txt