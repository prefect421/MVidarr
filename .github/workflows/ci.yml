name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create test environment file
      run: |
        cat > .env << EOF
        DB_HOST=mvidarr-mariadb
        DB_PORT=3306
        DB_USER=mvidarr
        DB_PASSWORD=test_password
        DB_NAME=mvidarr_test
        SECRET_KEY=test_secret_key_for_ci
        DEBUG=true
        IMVDB_API_KEY=test_key
        YOUTUBE_API_KEY=test_key
        EOF

    - name: Start MariaDB container
      run: |
        docker network create mvidarr-test-network
        docker run -d \
          --name mvidarr-mariadb \
          --network mvidarr-test-network \
          -e MYSQL_ROOT_PASSWORD=test_root_password \
          -e MYSQL_DATABASE=mvidarr_test \
          -e MYSQL_USER=mvidarr \
          -e MYSQL_PASSWORD=test_password \
          -p 3306:3306 \
          mariadb:11.4

    - name: Wait for MariaDB to be healthy
      run: |
        timeout=180
        count=0
        while [ $count -lt $timeout ]; do
          if docker inspect --format='{{.State.Health.Status}}' mvidarr-mariadb | grep -q healthy; then
            echo "MariaDB is healthy!"
            break
          fi
          echo "Waiting for MariaDB to be healthy... ($count/$timeout)"
          sleep 3
          count=$((count + 3))
        done
        if [ $count -ge $timeout ]; then
          echo "MariaDB failed to become healthy within timeout"
          docker logs mvidarr-mariadb
          exit 1
        fi

    - name: Build and start MVidarr test container
      run: |
        docker build -f Dockerfile.production -t mvidarr:test .
        docker run -d \
          --name mvidarr-test \
          --network mvidarr-test-network \
          -p 5000:5000 \
          --env-file .env \
          -e DB_HOST=mvidarr-mariadb \
          -v $(pwd)/data:/app/data \
          mvidarr:test

    - name: Wait for MVidarr application to be ready
      run: |
        timeout=180
        count=0
        while [ $count -lt $timeout ]; do
          if curl -f http://localhost:5000/api/health/status >/dev/null 2>&1; then
            echo "MVidarr application is ready!"
            break
          fi
          echo "Waiting for MVidarr to be ready... ($count/$timeout)"
          sleep 3
          count=$((count + 3))
        done
        if [ $count -ge $timeout ]; then
          echo "MVidarr failed to start within timeout"
          docker logs mvidarr-test
          exit 1
        fi

    - name: Run comprehensive tests
      run: |
        # Run tests against the running containerized application
        docker exec mvidarr-test python scripts/testing/run_comprehensive_tests.py --url http://localhost:5000

    - name: Run unit tests (if available)
      run: |
        # Run unit tests inside the container  
        docker exec mvidarr-test pytest tests/unit/ -v --cov=src --cov-report=xml || echo "Unit tests not yet implemented"


    - name: Extract test results
      if: always()
      run: |
        # Copy test results from container if they exist
        docker cp mvidarr-test:/app/coverage.xml ./coverage.xml || echo "No coverage report found"
        
    - name: Cleanup containers
      if: always()
      run: |
        docker stop mvidarr-test mvidarr-mariadb || true
        docker rm mvidarr-test mvidarr-mariadb || true
        docker network rm mvidarr-test-network || true

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: github.event_name == 'push'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort pylint safety bandit

    - name: Run flake8
      run: flake8 src/ --max-line-length=120 --exclude=__pycache__ --statistics || true

    - name: Check code formatting with black
      run: black --check src/ || true

    - name: Check import ordering with isort
      run: isort --check-only src/ || true

    - name: Run pylint
      run: pylint src/ --exit-zero

    - name: Run safety check
      run: safety check || true

    - name: Run bandit security check
      run: bandit -r src/ -x tests/ || true

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan, lint]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
