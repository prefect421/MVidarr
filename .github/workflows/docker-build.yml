name: Build and Push Docker Image

on:
  push:
    branches:
      - main
      - dev
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build development image
      if: github.ref == 'refs/heads/dev'
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Monitor Docker Image Size
      if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'
      run: |
        # Get image size information
        IMAGE_TAG="${{ github.ref == 'refs/heads/dev' && format('{0}/{1}:dev', env.REGISTRY, env.IMAGE_NAME) || format('{0}/{1}:latest', env.REGISTRY, env.IMAGE_NAME) }}"
        
        echo "üìä Docker Image Size Analysis"
        echo "================================"
        
        # Pull the image to get accurate size info
        docker pull "$IMAGE_TAG"
        
        # Get image size
        IMAGE_SIZE=$(docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" "$IMAGE_TAG" | tail -n +2)
        echo "üê≥ Image: $IMAGE_SIZE"
        
        # Get detailed layer information
        echo ""
        echo "üìã Layer Information:"
        docker history --human --format "table {{.CreatedBy}}\t{{.Size}}" "$IMAGE_TAG" | head -10
        
        # Check if image size exceeds thresholds
        SIZE_BYTES=$(docker inspect "$IMAGE_TAG" --format='{{.Size}}')
        SIZE_MB=$((SIZE_BYTES / 1024 / 1024))
        
        echo ""
        echo "üìà Size Analysis:"
        echo "- Size in MB: ${SIZE_MB}"
        
        if [ "$SIZE_MB" -gt 1000 ]; then
          echo "‚ö†Ô∏è WARNING: Image size (${SIZE_MB}MB) exceeds 1GB threshold"
          echo "Consider optimizing the Dockerfile to reduce image size"
        elif [ "$SIZE_MB" -gt 500 ]; then
          echo "‚ö†Ô∏è NOTICE: Image size (${SIZE_MB}MB) is above 500MB"
          echo "Monitor for further size increases"
        else
          echo "‚úÖ Image size (${SIZE_MB}MB) is within acceptable limits"
        fi