# Multi-stage build for MVidarr production deployment
# Stage 1: Build environment with all tools
# Stage 2: Runtime environment with minimal dependencies

#################################
# Stage 1: Build Environment
#################################
FROM python:3.12-slim AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    pkg-config \
    default-libmysqlclient-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy and install production requirements
COPY requirements-prod.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir --prefix=/opt/python -r requirements-prod.txt

#################################
# Stage 2: Runtime Environment
#################################
FROM python:3.12-slim AS runtime

# Install only runtime system dependencies (no build tools)
RUN apt-get update && apt-get install -y \
    curl \
    ffmpeg \
    wget \
    ca-certificates \
    default-libmysqlclient-dev \
    mariadb-client \
    netcat-openbsd \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get autoremove -y \
    && apt-get autoclean

# Create non-root user for security
RUN groupadd -r mvidarr && useradd -r -g mvidarr -u 1000 mvidarr

# Set working directory
WORKDIR /app

# Copy Python packages from builder stage
COPY --from=builder /opt/python /usr/local

# Create necessary directories and change ownership
RUN mkdir -p /app/data/downloads /app/data/musicvideos /app/data/music_videos /app/data/thumbnails /app/data/logs /app/data/cache /app/data/backups /app/data/database /app/config && \
    chown -R mvidarr:mvidarr /app/data /app/config

# Copy application code with correct ownership
COPY --chown=mvidarr:mvidarr . .

# Create empty .env file with write permissions for mvidarr user
RUN touch /app/.env && chown mvidarr:mvidarr /app/.env && chmod 664 /app/.env

# Copy production configuration files
COPY --chown=mvidarr:mvidarr docker-config.yml.sample /app/config/docker-config.yml

# Copy and setup entrypoint script
COPY entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh && chown root:root /app/entrypoint.sh

# Set environment variables for runtime
ENV PYTHONPATH=/app/src \
    PYTHONUNBUFFERED=1 \
    FLASK_ENV=production \
    PORT=5000 \
    HOST=0.0.0.0

# Expose the application port
EXPOSE 5000

# Run the application
ENTRYPOINT ["/app/entrypoint.sh"]