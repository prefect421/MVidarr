# Multi-stage build for MVidarr production deployment
# Built for comprehensive music video management system

FROM python:3.12-slim AS base

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    ffmpeg \
    wget \
    ca-certificates \
    pkg-config \
    default-libmysqlclient-dev \
    mariadb-client \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for security
RUN groupadd -r mvidarr && useradd -r -g mvidarr -u 1000 mvidarr

# Set working directory
WORKDIR /app

# Copy requirements first for better layer caching
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create necessary directories with proper permissions
RUN mkdir -p \
    /app/data/downloads \
    /app/data/musicvideos \
    /app/data/thumbnails \
    /app/data/logs \
    /app/data/cache \
    /app/data/backups \
    /app/data/database \
    /app/config && \
    chown -R mvidarr:mvidarr /app

# Copy production configuration files
COPY docker-config.yml.sample /app/config/docker-config.yml

# Set environment variables for runtime
ENV PYTHONPATH=/app/src \
    PYTHONUNBUFFERED=1 \
    FLASK_ENV=production \
    PORT=5000 \
    HOST=0.0.0.0

# Expose the application port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:5000/api/health || exit 1

# Switch to non-root user
USER mvidarr

# Create entrypoint script
COPY --chown=mvidarr:mvidarr <<EOF /app/entrypoint.sh
#!/bin/bash
set -e

# Wait for database to be ready
echo "Waiting for MariaDB to be ready..."
timeout=60
count=0
while [ $count -lt $timeout ]; do
    if mysqladmin ping -h"${DB_HOST:-mariadb}" -P"${DB_PORT:-3306}" -u"${DB_USER:-mvidarr}" -p"${DB_PASSWORD:-secure_password}" --silent 2>/dev/null; then
        echo "MariaDB is ready!"
        break
    fi
    echo "MariaDB is unavailable - sleeping ($count/$timeout)"
    sleep 2
    count=$((count + 1))
done

if [ $count -eq $timeout ]; then
    echo "MariaDB failed to start within timeout - exiting"
    exit 1
fi

echo "MariaDB is ready - starting application"

# Initialize database if needed
if [ ! -f /app/data/database/.initialized ]; then
    echo "Initializing database..."
    python3 scripts/setup_database.sh || true
    python3 scripts/init_auth_database.py || true
    touch /app/data/database/.initialized
fi

# Start the application
exec python3 app.py
EOF

RUN chmod +x /app/entrypoint.sh

# Run the application
ENTRYPOINT ["/app/entrypoint.sh"]