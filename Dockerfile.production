# Multi-stage build for MVidarr production deployment
# Built for comprehensive music video management system

FROM python:3.12-slim AS base

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    ffmpeg \
    wget \
    ca-certificates \
    pkg-config \
    default-libmysqlclient-dev \
    mariadb-client \
    build-essential \
    netcat-openbsd \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for security
RUN groupadd -r mvidarr && useradd -r -g mvidarr -u 1000 mvidarr

# Set working directory
WORKDIR /app

# Copy requirements first for better layer caching
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Create necessary directories and change ownership before copying files
RUN mkdir -p /app/data/downloads /app/data/musicvideos /app/data/music_videos /app/data/thumbnails /app/data/logs /app/data/cache /app/data/backups /app/data/database /app/config && \
    chown -R mvidarr:mvidarr /app/data /app/config

# Copy application code with correct ownership
COPY --chown=mvidarr:mvidarr . .

# Create empty .env file with write permissions for mvidarr user (after copying code)
RUN touch /app/.env && chown mvidarr:mvidarr /app/.env && chmod 664 /app/.env

# Copy production configuration files
COPY --chown=mvidarr:mvidarr docker-config.yml.sample /app/config/docker-config.yml

# Set environment variables for runtime
ENV PYTHONPATH=/app/src \
    PYTHONUNBUFFERED=1 \
    FLASK_ENV=production \
    PORT=5000 \
    HOST=0.0.0.0

# Expose the application port
EXPOSE 5000

# Health check removed to prevent issues in CI environments

# Note: Container starts as root to handle permissions, then switches to mvidarr user in entrypoint

# Create entrypoint script
COPY --chown=mvidarr:mvidarr <<EOF /app/entrypoint.sh
#!/bin/bash
set -e

# Wait for database to be ready
echo "Waiting for MariaDB to be ready..."
echo "Connection details - Host: \${DB_HOST:-mariadb}, Port: \${DB_PORT:-3306}, User: \${DB_USER:-mvidarr}"

# Simple wait for port availability with timeout
timeout=180
count=0
while [ \$count -lt \$timeout ]; do
    if nc -z "\${DB_HOST:-mariadb}" "\${DB_PORT:-3306}" 2>/dev/null; then
        echo "MariaDB port is reachable, waiting for database to be fully ready..."
        sleep 5
        echo "MariaDB is ready - starting application"
        break
    else
        echo "MariaDB port \${DB_PORT:-3306} not reachable on \${DB_HOST:-mariadb}, waiting... (\$count/\$timeout seconds)"
    fi
    sleep 3
    count=\$((count + 3))
done

if [ \$count -ge \$timeout ]; then
    echo "MariaDB failed to start within timeout (\$timeout seconds)"
    echo "Checking MariaDB connection details:"
    echo "Host: \${DB_HOST:-mariadb}"
    echo "Port: \${DB_PORT:-3306}"
    echo "User: \${DB_USER:-mvidarr}"
    echo "Database: \${DB_NAME:-mvidarr}"
    echo "Testing basic connectivity..."
    nc -z "\${DB_HOST:-mariadb}" "\${DB_PORT:-3306}" && echo "Port is reachable" || echo "Port is not reachable"
    exit 1
fi

# Initialize database if needed
if [ ! -f /app/data/database/.initialized ]; then
    echo "Initializing database..."
    # Use Python to initialize the database through the app's init_db function
    python3 -c "
import sys
sys.path.insert(0, '/app/src')
from database.init_db import create_tables
try:
    success = create_tables()
    if success:
        print('Database initialized successfully')
    else:
        print('Database initialization failed')
except Exception as e:
    print(f'Database initialization failed: {e}')
    # Don't exit on database init failure in case it already exists
" || echo "Database initialization failed or already exists"
    touch /app/data/database/.initialized
fi

# Start the application
echo "Starting MVidarr application..."
echo "Python path: \$PYTHONPATH"
echo "Working directory: \$(pwd)"
echo "App.py exists: \$(test -f app.py && echo 'yes' || echo 'no')"

# Start with better error handling
if ! python3 app.py; then
    echo "Application failed to start. Checking for common issues..."
    echo "Directory contents:"
    ls -la /app/
    echo "Python modules in src:"
    ls -la /app/src/ || echo "src directory not found"
    echo "Python version: \$(python3 --version)"
    exit 1
fi
EOF

RUN chmod +x /app/entrypoint.sh

# Run the application
ENTRYPOINT ["/app/entrypoint.sh"]