[tool:pytest]
# MVidarr pytest configuration
minversion = 7.0
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test discovery
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov-report=html:tests/htmlcov
    --cov-report=term-missing
    --cov-report=xml:tests/coverage.xml
    --cov-fail-under=80
    --durations=10

# Markers
markers =
    unit: Unit tests - test individual functions/methods in isolation
    integration: Integration tests - test interaction between components
    functional: Functional tests - test complete user workflows
    api: API tests - test REST endpoints and responses
    slow: Slow tests - tests that take >5 seconds to run
    auth: Authentication tests - tests requiring user authentication
    database: Database tests - tests that interact with database
    external: External service tests - tests that call external APIs
    ui: UI tests - tests that interact with web interface
    visual: Visual regression and screenshot tests
    regression: Visual regression comparison tests
    monitoring: Test monitoring, logging, and performance analysis
    system: System resource and environment monitoring tests
    performance: Performance monitoring and analysis tests
    ci: CI/CD integration and automation tests
    parallel: Parallel execution and optimization tests
    flaky: Flaky test detection and management tests
    baselines: Performance baseline and regression tests
    optimization: CI/CD optimization and intelligence tests
    retry: Test retry logic and reliability tests
    alerting: Performance alerting and notification tests
    maintenance: Test maintenance and cleanup automation
    coverage: Coverage monitoring and reporting tests
    health: Test health monitoring and environment management
    automation: Automated maintenance and lifecycle tests

# Filtering
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */venv/*
    */migrations/*
    */scripts/*
    */__pycache__/*
    */conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = tests/htmlcov