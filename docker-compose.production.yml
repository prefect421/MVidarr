version: '3.8'

services:
  mvidarr:
    build: 
      context: .
      dockerfile: Dockerfile.production
    image: mvidarr:latest
    container_name: mvidarr
    ports:
      - "${MVIDARR_PORT:-5000}:5000"
    environment:
      - NODE_ENV=production
      - DB_HOST=mariadb
      - DB_PORT=3306
      - DB_USER=mvidarr
      - DB_PASSWORD=${DB_PASSWORD:-secure_password}
      - DB_NAME=mvidarr
      - SECRET_KEY=${SECRET_KEY:-generate_random_secret_key}
      - IMVDB_API_KEY=${IMVDB_API_KEY:-}
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY:-}
      - PORT=5000
      - DEBUG=false
      - PYTHONUNBUFFERED=1
      - TZ=${TZ:-UTC}
    volumes:
      - ${MUSIC_VIDEOS_PATH:-./musicvideos}:/app/data/downloads
      - ${DATABASE_FOLDER:-./database}:/app/data/database
      - ${THUMBNAILS_PATH:-./thumbnails}:/app/data/thumbnails
      - ${LOGS_PATH:-./logs}:/app/data/logs
      - ${CACHE_PATH:-./cache}:/app/data/cache
      - ${CONFIG_PATH:-./config}:/app/config
    depends_on:
      mariadb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mvidarr-network

  mariadb:
    image: mariadb:11.4
    container_name: mvidarr-mariadb
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-root_password}
      - MYSQL_DATABASE=mvidarr
      - MYSQL_USER=mvidarr
      - MYSQL_PASSWORD=${DB_PASSWORD:-secure_password}
      - MYSQL_CHARSET=utf8mb4
      - MYSQL_COLLATION=utf8mb4_unicode_ci
      - TZ=${TZ:-UTC}
    volumes:
      - ${DATABASE_FOLDER:-./database}/mariadb:/var/lib/mysql
      - ./docker/mariadb/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${MARIADB_PORT:-3306}:3306"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - mvidarr-network

  # Optional: Reverse proxy for SSL termination and load balancing
  # Uncomment and configure if needed
  # nginx:
  #   image: nginx:alpine
  #   container_name: mvidarr-nginx
  #   ports:
  #     - "${HTTP_PORT:-80}:80"
  #     - "${HTTPS_PORT:-443}:443"
  #   volumes:
  #     - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./docker/nginx/ssl:/etc/nginx/ssl:ro
  #     - ${LOGS_PATH:-./logs}/nginx:/var/log/nginx
  #   depends_on:
  #     - mvidarr
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - mvidarr-network

volumes:
  # Named volumes for internal container data
  # These are used when not mapping to host directories
  app_data:
    driver: local
  thumbnails_volume:
    driver: local
  logs_volume:
    driver: local
  cache_volume:
    driver: local

networks:
  mvidarr-network:
    driver: bridge